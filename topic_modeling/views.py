from django.shortcuts import render

# Create your views here.
# -*- coding: utf-8 -*-
"""TopicModelling (LDA) (Techtrek).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v8eYme4fHkvluHcjRn3ovmMqxFjGrN9H
"""

import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from gensim.corpora import Dictionary
from gensim.models import LdaModel
from gensim.models.coherencemodel import CoherenceModel
import nltk

import pyLDAvis
import pyLDAvis.gensim_models as gensimvis

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('punkt_tab')


custom_stopwords = [
    "would", "could", "also", "said", "like", "get", "make", "time",
    "well", "one", "two", "may", "might", "see", "use", "used",
    "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december",
    "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec",
    "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday",
    "sun", "mon", "tue", "wed", "thu", "fri", "sat",
    "AM", "PM", "pm", "am",
    "instagram", "insta",
    "facebook", "fb",
    "twitter", "twt",
    "youtube", "yt",
    "story", "replied","enter", "sent", "seen", "profile", "message", "view"
    "hii", "hello",
    "saikadiwanaankit"
]

stop_words = set(stopwords.words('english'))
stop_words.update(custom_stopwords)

def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    words = word_tokenize(text)
    filtered_words = [word for word in words if word not in stop_words and len(word) > 2]
    return filtered_words


# def main_fun_topic_modeling(text_data):
#     processed_docs = [preprocess_text(doc) for doc in text_data]

#     dictionary = Dictionary(processed_docs)
#     corpus = [dictionary.doc2bow(doc) for doc in processed_docs]

#     num_topics = 5
#     lda_model = LdaModel(corpus=corpus, id2word=dictionary, num_topics=num_topics, passes=10, random_state=42)

#     topics = lda_model.print_topics(num_words=10)
#     topic_list = []
#     for i, topic in topics:
#         topic_list.append(topic[1])

#     coherence_model = CoherenceModel(model=lda_model, texts=processed_docs, dictionary=dictionary, coherence='c_v')
#     coherence_score = coherence_model.get_coherence()

    
#     pyLDAvis.enable_notebook()
#     vis = gensimvis.prepare(lda_model, corpus, dictionary)
#     return topic_list, coherence_score, vis

# # !pip install pyLDAvis

def main_fun_topic_modeling(text_data):
    # Check if input data is empty
    if not text_data:
        raise ValueError("Input text data is empty.")
    
    # Process the text data
    processed_docs = [preprocess_text(doc) for doc in text_data]
    

    # Check for empty documents after preprocessing
    processed_docs = [doc for doc in processed_docs if len(doc) > 0]
    
    # If no documents remain after filtering, raise an error
    if not processed_docs:
        raise ValueError("Processed documents are empty after filtering. Unable to perform topic modeling.")
    
    # Create the dictionary and corpus
    dictionary = Dictionary(processed_docs)
    corpus = [dictionary.doc2bow(doc) for doc in processed_docs]
    
    # Ensure there are terms in the corpus
    if not corpus:
        raise ValueError("Corpus is empty. Cannot perform topic modeling on an empty corpus.")
    
    num_topics = 5
    lda_model = LdaModel(corpus=corpus, id2word=dictionary, num_topics=num_topics, passes=10, random_state=42)

    # Get the topics
    topics = lda_model.print_topics(num_words=10)
    topic_list = [topic[1] for topic in topics]

    # Calculate coherence score
    coherence_model = CoherenceModel(model=lda_model, texts=processed_docs, dictionary=dictionary, coherence='c_v')
    coherence_score = coherence_model.get_coherence()

    # Prepare visualization
    pyLDAvis.enable_notebook()
    vis = gensimvis.prepare(lda_model, corpus, dictionary)
    
    return topic_list, coherence_score, vis

